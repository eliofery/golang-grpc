syntax = "proto3";

package denied_token.v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "denied_token/v1/create_token_request.proto";

option go_package = "github.com/eliofery/golang-grpc/pkg/api/denied_token/v1";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Denied Token API"
    version: "1.0"
    description: "Interaction with denied token via API"
    contact: {
      name: "Sergio Eliofery"
      url: "https://github.com/eliofery/golang-grpc"
      //      email: "mail@example.site" todo add email
    }
    //    license: {
    //      name: "MIT"
    //      url: "https://github.com/eliofery/golang-grpc/blob/main/LICENSE"
    //    }
  }
  host: "localhost:8080"
  schemes: HTTP
  consumes: "application/json"
  produces: "application/json"
  security_definitions: {
    security: {
      key: "bearer"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "Authorization"
        description: "Authentication token, prefixed by Bearer: Bearer [token]"
      }
    }
  }
  security: {
    security_requirement: {key: "bearer"}
  }
  responses: {
    key: "400",
    value: {
      description: "Invalid input";
      schema: {example: '{"code":3,"message":"validation error","details":[]}'}
    }
  }
};

service DeniedTokenV1Service {
  // Add token to blacklist
  rpc Create(CreateRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/denied_token/create"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Add token to blacklist"
      tags: "Create",
      responses: {
        key: "200"
        value: {
          description: "Added token to blacklist"
        }
      }
    };
  }
}
