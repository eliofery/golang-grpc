syntax = "proto3";

package app.v1;

import "app/v1/auth/logout_request.proto";
import "app/v1/auth/signin_request.proto";
import "app/v1/auth/signin_response.proto";
import "app/v1/auth/signup_request.proto";
import "app/v1/auth/signup_response.proto";
import "app/v1/user/create_request.proto";
import "app/v1/user/create_response.proto";
import "app/v1/user/delete_request.proto";
import "app/v1/user/get_all_request.proto";
import "app/v1/user/get_all_response.proto";
import "app/v1/user/get_by_id_request.proto";
import "app/v1/user/get_by_id_response.proto";
import "app/v1/user/update_request.proto";
import "app/v1/user/update_response.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/eliofery/golang-grpc/pkg/api/app/v1";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Online store API"
    version: "1.0"
    description: "**Online Store API** is a software interface of an application that facilitates interaction between an online store and other systems or client applications. \n\n Through this API, various operations can be performed, such as browsing the product catalog, adding items to the shopping cart, placing orders, managing users, and so on. \n It enables developers to integrate the functionality of the online store into their applications or automate processes related to the store."
    contact: {
      name: "Sergio Eliofery"
      url: "https://github.com/eliofery/golang-grpc"
      email: "mail@example.site"
    }
    license: {
      name: "MIT"
      url: "https://github.com/eliofery/golang-grpc/blob/main/LICENSE"
    }
  }
  host: "localhost:8080"
  schemes: [
    HTTP,
    HTTPS
  ]
  consumes: ["application/json"]
  produces: ["application/json"]
  tags: [
    {
      name: "Auth"
      description: "User authentication"
    },
    {
      name: "User"
      description: "Operations about user"
    }
  ]
  security_definitions: {
    security: {
      key: "bearer"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "Authorization"
        description: "Authentication token, prefixed by Bearer: Bearer [token]"
      }
    }
  }
  security: {
    security_requirement: {key: "bearer"}
  }
  responses: {
    key: "400"
    value: {
      description: "Invalid input"
      schema: {example: '{"code":3,"message":"string","details":[{"@type":"string","additionalProp1":"string", "additionalProp2":"string","additionalProp3":"string"}]}'}
    }
  }
  responses: {
    key: "403"
    value: {
      description: "Access denied"
      schema: {example: '{"code":7,"message":"string","details":[{"@type":"string","additionalProp1":"string", "additionalProp2":"string","additionalProp3":"string"}]}'}
    }
  }
  responses: {
    key: "500"
    value: {
      description: "Internal server error"
      schema: {example: '{"code":13,"message":"string","details":[{"@type":"string","additionalProp1":"string", "additionalProp2":"string","additionalProp3":"string"}]}'}
    }
  }
};

service AppService {
  rpc SignUp(auth.SignUpRequest) returns (auth.SignUpResponse) {
    option (google.api.http) = {
      post: "/v1/auth/signup"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Registration user"
      tags: "Auth"
      security: {}
      responses: {
        key: "404"
        value: {
          description: "User role is not defined"
          schema: {example: '{"code":5,"message":"string","details":[{"@type":"string","additionalProp1":"string", "additionalProp2":"string","additionalProp3":"string"}]}'}
        }
      }
      responses: {
        key: "409"
        value: {
          description: "User already exists"
          schema: {example: '{"code":6,"message":"string","details":[{"@type":"string","additionalProp1":"string", "additionalProp2":"string","additionalProp3":"string"}]}'}
        }
      }
    };
  }

  rpc SignIn(auth.SignInRequest) returns (auth.SignInResponse) {
    option (google.api.http) = {
      post: "/v1/auth/signin"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Authorization user"
      tags: "Auth"
      security: {}
      responses: {
        key: "403"
        value: {
          description: "Wrong login or password"
          schema: {example: '{"code":7,"message":"string","details":[{"@type":"string","additionalProp1":"string", "additionalProp2":"string","additionalProp3":"string"}]}'}
        }
      }
    };
  }

  rpc Logout(auth.LogoutRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/auth/logout"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "User logout"
      tags: "Auth"
      responses: {
        key: "404"
        value: {
          description: "Role not found"
          schema: {example: '{"code":5,"message":"string","details":[{"@type":"string","additionalProp1":"string", "additionalProp2":"string","additionalProp3":"string"}]}'}
        }
      }
    };
  }

  rpc CreateUser(user.CreateUserRequest) returns (user.CreateUserResponse) {
    option (google.api.http) = {
      post: "/v1/users/create"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create user"
      tags: "User"
      responses: {
        key: "404"
        value: {
          description: "Role not found"
          schema: {example: '{"code":5,"message":"string","details":[{"@type":"string","additionalProp1":"string", "additionalProp2":"string","additionalProp3":"string"}]}'}
        }
      }
      responses: {
        key: "409"
        value: {
          description: "User already exists"
          schema: {example: '{"code":6,"message":"string","details":[{"@type":"string","additionalProp1":"string", "additionalProp2":"string","additionalProp3":"string"}]}'}
        }
      }
    };
  }

  rpc DeleteUser(user.DeleteUserRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {delete: "/v1/users/delete/{id}"};

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete user"
      tags: "User"
      responses: {
        key: "404"
        value: {
          description: "User not found"
          schema: {example: '{"code":5,"message":"string","details":[{"@type":"string","additionalProp1":"string", "additionalProp2":"string","additionalProp3":"string"}]}'}
        }
      }
    };
  }

  rpc GetUsers(user.GetUsersRequest) returns (user.GetUsersResponse) {
    option (google.api.http) = {get: "/v1/users"};

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get users"
      tags: "User"
      responses: {
        key: "404"
        value: {
          description: "User not found"
          schema: {example: '{"code":5,"message":"string","details":[{"@type":"string","additionalProp1":"string", "additionalProp2":"string","additionalProp3":"string"}]}'}
        }
      }
    };
  }

  rpc GetUserByID(user.GetUserByIDRequest) returns (user.GetUserByIDResponse) {
    option (google.api.http) = {get: "/v1/users/{id}"};

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get user"
      tags: "User"
      responses: {
        key: "404"
        value: {
          description: "User not found"
          schema: {example: '{"code":5,"message":"string","details":[{"@type":"string","additionalProp1":"string", "additionalProp2":"string","additionalProp3":"string"}]}'}
        }
      }
    };
  }

  rpc UpdateUser(user.UpdateUserRequest) returns (user.UpdateUserResponse) {
    option (google.api.http) = {
      put: "/v1/users/update/{id}"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update user"
      tags: "User"
      responses: {
        key: "404"
        value: {
          description: "User not found"
          schema: {example: '{"code":5,"message":"string","details":[{"@type":"string","additionalProp1":"string", "additionalProp2":"string","additionalProp3":"string"}]}'}
        }
      }
    };
  }
}
