syntax = "proto3";

package permission.v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "permission/v1/create_request.proto";
import "permission/v1/create_response.proto";
import "permission/v1/get_by_id_request.proto";
import "permission/v1/get_by_id_response.proto";
import "permission/v1/update_request.proto";
import "permission/v1/update_response.proto";
import "permission/v1/delete_request.proto";
import "permission/v1/get_all_request.proto";
import "permission/v1/get_all_response.proto";

option go_package = "github.com/eliofery/golang-grpc/pkg/api/permission/v1";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Permissions API"
    version: "1.0"
    description: "Interaction with permission via API"
    contact: {
      name: "Sergio Eliofery"
      url: "https://github.com/eliofery/golang-grpc"
      //      email: "mail@example.site" todo add email
    }
    //    license: {
    //      name: "MIT"
    //      url: "https://github.com/eliofery/golang-grpc/blob/main/LICENSE"
    //    }
  }
  host: "localhost:8080"
  schemes: [
    HTTP,
    HTTPS
  ]
  consumes: ["application/json"]
  produces: ["application/json"]
  security_definitions: {
    security: {
      key: "bearer"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "Authorization"
        description: "Authentication token, prefixed by Bearer: Bearer [token]"
      }
    }
  }
  security: {
    security_requirement: {key: "bearer"}
  }
  responses: {
    key: "400",
    value: {
      description: "Invalid input";
      schema: {example: '{"code":3,"message":"validation error","details":[]}'}
    }
  }
  responses: {
    key: "500",
    value: {
      description: "Internal server error";
      schema: {example: '{"code":13,"message":"internal server error","details":[]}'}
    }
  }
};

service PermissionV1Service {
  // Create new permission
  rpc Create(CreateRequest) returns (CreateResponse) {
    option (google.api.http) = {
      post: "/v1/permissions/create"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create new permission"
      tags: "Create"
      responses: {
        key: "200"
        value: {
          description: "Create new permission"
          schema: {
            json_schema: {ref: "#/definitions/v1CreateResponse"}
          }
        }
      }
      responses: {
        key: "409"
        value: {
          description: "Permission already exists"
          schema: {example: '{"code":6,"message":"permission already exists","details":[]}'}
        }
      }
    };
  }

  // Get permission
  rpc GetByID(GetByIDRequest) returns (GetByIDResponse) {
    option (google.api.http) = {
      get: "/v1/permissions/{id}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get permission data"
      tags: "Read"
      responses: {
        key: "200"
        value: {
          description: "Get permission data"
          schema: {
            json_schema: {ref: "#/definitions/v1GetByIDResponse"}
          }
        }
      }
      responses: {
        key: "403"
        value: {
          description: "Access denied"
          schema: {
            example: '{"code":7,"message":"you are not authenticated","details":[]}'
          }
        }
      }
      responses: {
        key: "404"
        value: {
          description: "Permission not found"
          schema: {
            example: '{"code":7,"message":"permission not found","details":[]}'
          }
        }
      }
    };
  }

  // Update permission
  rpc Update(UpdateRequest) returns (UpdateResponse) {
    option (google.api.http) = {
      put: "/v1/permissions/update/{id}"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update permission data"
      tags: "Update"
      responses: {
        key: "200"
        value: {
          description: "Update permission data"
          schema: {
            json_schema: {ref: "#/definitions/v1UpdateResponse"}
          }
        }
      }
      responses: {
        key: "403"
        value: {
          description: "Access denied"
          schema: {
            example: '{"code":7,"message":"you are not authenticated","details":[]}'
          }
        }
      }
      responses: {
        key: "404"
        value: {
          description: "Permission not found"
          schema: {
            example: '{"code":7,"message":"permission not found","details":[]}'
          }
        }
      }
    };
  }

  // Delete permission
  rpc Delete(DeleteRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/permissions/delete/{id}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete permission data"
      tags: "Delete"
      responses: {
        key: "200"
        value: {
          description: "Delete permission data"
        }
      }
      responses: {
        key: "403"
        value: {
          description: "Access denied"
          schema: {
            example: '{"code":7,"message":"you are not authenticated","details":[]}'
          }
        }
      }
      responses: {
        key: "404"
        value: {
          description: "Permission not found"
          schema: {
            example: '{"code":7,"message":"permission not found","details":[]}'
          }
        }
      }
    };
  }

  // Get all permission
  rpc GetAll(GetAllRequest) returns (GetAllResponse) {
    option (google.api.http) = {
      get: "/v1/permissions"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get all permission data"
      tags: "Read"
      responses: {
        key: "200"
        value: {
          description: "Get all permission data"
          schema: {
            json_schema: {ref: "#/definitions/v1GetAllResponse"}
          }
        }
      }
      responses: {
        key: "403"
        value: {
          description: "Access denied"
          schema: {
            example: '{"code":7,"message":"you are not authenticated","details":[]}'
          }
        }
      }
      responses: {
        key: "404"
        value: {
          description: "Permission not found"
          schema: {
            example: '{"code":7,"message":"permission not found","details":[]}'
          }
        }
      }
    };
  }
}
